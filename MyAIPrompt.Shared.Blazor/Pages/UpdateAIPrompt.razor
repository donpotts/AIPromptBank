@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update AIPrompt</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Update AIPrompt</MudText>
            </TitleContent>
            <DialogContent>
                <MudTextField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" />
                <MudTextField @bind-Value="record.Title" For="@(() => record.Title)" Label="Title" />
                <MudTextField @bind-Value="record.Content" For="@(() => record.Content)" Label="Content" />
                <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.CreateDate" For="@(() => record.CreateDate)" Label="CreateDate" />
                <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.ModifiedDate" For="@(() => record.ModifiedDate)" Label="ModifiedDate" />
                <MudCheckBox @bind-Checked="record.IsSynced" For="@(() => record.IsSynced)" Label="IsSynced"></MudCheckBox>
                <MudCheckBox @bind-Checked="record.IsDeleted" For="@(() => record.IsDeleted)" Label="IsDeleted"></MudCheckBox>
                <MudTextField @bind-Value="record.Hash" For="@(() => record.Hash)" Label="Hash" />
                <MudSelect T="Guid?" Label="AITag" MultiSelection="true" @bind-SelectedValues="aITagValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => aITagArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Name)))" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var aITag in aITagArray ?? Enumerable.Empty<AITag>())
                    {
                        <MudSelectItem T="Guid?" Value="@aITag.Id">@aITag.Name</MudSelectItem>
                    }
                </MudSelect>
                 @* <MudSelect T="Guid?" Label="AITag"
                       MultiSelection="true"
                       @bind-SelectedValues="aITagValues"
                       AnchorOrigin="Origin.BottomCenter"
                       Class="tag-select"
                       DisableUnderline="true">
                        @foreach (var aITag in aITagArray ?? Enumerable.Empty<AITag>())
                        {
                            var bgColor = aITag.Color ?? "#cccccc";
                            <MudSelectItem T="Guid?" Value="@aITag.Id">
                                <MudChip T="string" Style="@($"background-color:{bgColor}; color:black; font-weight:bold;")">
                                    @aITag.Name
                                </MudChip>
                            </MudSelectItem>
                        }
                    </MudSelect>
                <div class="d-flex flex-wrap mt-2">
                    @if (aITagArray != null && aITagValues != null)
                    {
                        @foreach (var tag in aITagArray.Where(t => aITagValues.Contains(t.Id)))
                        {
                            var bgColor = tag.Color ?? "#cccccc";
                            <MudChip T="string" Style="@($"background-color:{bgColor}; color:black; font-weight:bold; margin-right:4px; margin-bottom:4px;")">
                                @tag.Name
                            </MudChip>
                        }
                    }
                </div> *@
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private AITag[]? aITagArray;
    private IEnumerable<Guid?>? aITagValues;
    private AIPrompt? record;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            aITagArray = await AppService.ListAITagAsync();
            record = await AppService.GetAIPromptByIdAsync(Id);
            aITagValues = record?.AITag?.Select(x => x.Id).ToHashSet() ?? [];
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            record.AITag = aITagValues?.Select(x => new AITag { Id = x }).ToList();
            await AppService.UpdateAIPromptAsync(Id, record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
