@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add AI System Prompt</MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField @bind-Value="record.Title" For="@(() => record.Title)" Label="Title" />
            <MudTextField @bind-Value="record.Content" For="@(() => record.Content)" Label="Content" />
            @* <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.CreateDate" For="@(() => record.CreateDate)" Label="CreateDate" />
            <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.ModifiedDate" For="@(() => record.ModifiedDate)" Label="ModifiedDate" />
            <MudCheckBox @bind-Checked="record.IsSynced" For="@(() => record.IsSynced)" Label="IsSynced" />
            <MudCheckBox @bind-Checked="record.IsDeleted" For="@(() => record.IsDeleted)" Label="IsDeleted" />
            <MudTextField @bind-Value="record.Hash" For="@(() => record.Hash)" Label="Hash" /> *@
            <MudSelect T="Guid?" Label="AI Prompt" MultiSelection="true" @bind-SelectedValues="aIPromptValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => aIPromptArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Title)))" AnchorOrigin="Origin.BottomCenter">
                @foreach (var aIPrompt in aIPromptArray ?? Enumerable.Empty<AIPrompt>())
                {
                    <MudSelectItem T="Guid?" Value="@aIPrompt.Id">@aIPrompt.Title</MudSelectItem>
                }
            </MudSelect>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private AIPrompt[]? aIPromptArray;
    private IEnumerable<Guid?>? aIPromptValues;
    private AISystemPrompt record = new();

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            aIPromptArray = await AppService.ListAIPromptAsync();
            aIPromptValues = record?.AIPrompt?.Select(x => x.Id).ToHashSet() ?? [];
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            record.AIPrompt = aIPromptValues?.Select(x => new AIPrompt { Id = x }).ToList();
            await AppService.InsertAISystemPromptAsync(record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
