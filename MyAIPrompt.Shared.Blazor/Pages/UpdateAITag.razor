@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update AI Tag</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Update AITag</MudText>
            </TitleContent>
            <DialogContent>
                @* <MudTextField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" /> *@
                <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
                <MudTextField @bind-Value="record.Description" For="@(() => record.Description)" Label="Description" />
                @* <MudTextField @bind-Value="record.Color" For="@(() => record.Color)" Label="Color" />
                <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.CreateDate" For="@(() => record.CreateDate)" Label="CreateDate" />
                <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.ModifiedDate" For="@(() => record.ModifiedDate)" Label="ModifiedDate" /> *@
                <MudSelect T="Guid?" Label="AI Prompt" MultiSelection="true" @bind-SelectedValues="aIPromptValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => aIPromptArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Title)))" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var aIPrompt in aIPromptArray ?? Enumerable.Empty<AIPrompt>())
                    {
                        <MudSelectItem T="Guid?" Value="@aIPrompt.Id">@aIPrompt.Title</MudSelectItem>
                    }
                </MudSelect>

            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private AIPrompt[]? aIPromptArray;
    private IEnumerable<Guid?>? aIPromptValues;
    private AITag? record;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            aIPromptArray = await AppService.ListAIPromptAsync();
            record = await AppService.GetAITagByIdAsync(Id);
            aIPromptValues = record?.AIPrompt?.Select(x => x.Id).ToHashSet() ?? [];
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            record.AIPrompt = aIPromptValues?.Select(x => new AIPrompt { Id = x }).ToList();
            await AppService.UpdateAITagAsync(Id, record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
